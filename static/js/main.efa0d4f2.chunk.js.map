{"version":3,"sources":["components/input/Input.js","components/item/Item.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","React","useState","value","setValue","className","isToggle","style","toggleStyle","onClick","toggle","onKeyUp","keyCode","handleSubmit","placeholder","onChange","target","Item","editing","setEditing","textInput","useRef","type","checked","completed","e","handleEdit","ref","onBlur","onDoubleClick","current","focus","readOnly","destroy","fontSize","propTyps","PropTypes","string","bool","func","Footer","active","handleFilter","filter","isClear","handleClear","App","items","setItems","setActive","setCompleted","setFilter","useEffect","c","a","i","length","findIndex","id","uniqid","prev","newItems","map","item","color","key","index","newCompleted","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.efa0d4f2.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Input.css'\n\nexport default function Input(props) {\n    const [value, setValue] = React.useState('')\n\n    const handleKeyUp = ({ keyCode }) => {\n        if (13 === keyCode) {\n            props.handleSubmit(value)\n            setValue('')\n        }\n    }\n\n    return (\n        <div className=\"Input\">\n            {props.isToggle && (\n                <button style={props.toggleStyle} onClick={props.toggle}>❯</button>\n            )}\n            <input onKeyUp={handleKeyUp} placeholder=\"What needs to be done?\" value={value} onChange={({target: { value }}) => setValue(value)}></input>\n        </div>\n    )\n}\n\nInput.propTypes = {\n    handleSubmit: PropTypes.func,\n    isToggle: PropTypes.bool,\n    toggleStyle: PropTypes.object,\n    toggle: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Item.css'\n\nexport default function Item(props) {\n    const [editing, setEditing] = React.useState(false)\n\n    const textInput = React.useRef(null)\n\n    const handleDblClick = () => {\n        setEditing(true)\n        textInput.current.focus()\n    }\n\n    const handleBlur = () => {\n        setEditing(false)\n    }\n\n    const handleKeyUp = ({ keyCode }) => {\n        if (13 === keyCode) {\n            setEditing(false)\n        }\n    }\n\n    return (\n        <div className=\"Item\">\n            <input onChange={props.toggle} type=\"checkbox\" checked={props.completed} />\n            <label  className={props.completed ? 'completed' : ''}></label>\n            <input \n                onChange={(e) => props.handleEdit(e.target.value)}\n                ref={textInput}\n                onBlur={handleBlur}\n                onKeyUp={handleKeyUp}\n                value={props.value} \n                type=\"text\" \n                className={`real ${editing ? 'editing' : ''}`} \n            />\n            <input \n                className={`placeholder ${props.completed ? 'completed' : ''}`}\n                type=\"text\" \n                value={props.value} \n                onDoubleClick={handleDblClick}\n                readOnly\n            />\n            <button onClick={props.destroy} style={{fontSize: '35px'}}>×</button>\n        </div>\n    )\n}\n\nItem.propTyps = {\n    value: PropTypes.string,\n    completed: PropTypes.bool,\n    toggle: PropTypes.func,\n    destroy: PropTypes.func,\n    handleEdit: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Footer.css'\n\nexport default function Footer(props) {\n    return (\n        <div className=\"Footer\">\n            <footer>\n                <p>{props.active} item{props.active !== 1 && 's'} left</p>\n                <div className=\"filter\">\n                    <button onClick={() => props.handleFilter('All')} className={props.filter === 'All' ? 'selected' : ''}>All</button>\n                    <button onClick={() => props.handleFilter('Active')} className={props.filter === 'Active' ? 'selected' : ''}>Active</button>\n                    <button onClick={() => props.handleFilter('Completed')} className={props.filter === 'Completed' ? 'selected' : ''}>Completed</button>\n                </div>\n                <div className=\"right\">\n                    <button className={`clear ${props.isClear ? '' : 'hide'}`} onClick={props.handleClear}>Clear Completed</button>\n                </div>\n            </footer>\n        </div>\n    )\n}\n\nFooter.propTypes = {\n    active: PropTypes.number,\n    filter: PropTypes.string,\n    handleFilter: PropTypes.func,\n    isClear: PropTypes.bool,\n    handleClear: PropTypes.func,\n}","import Input from './components/input/Input'\nimport Item from './components/item/Item'\nimport Footer from './components/footer/Footer'\n\nimport React from 'react'\nimport uniqid from 'uniqid'\n\nimport './App.css';\n\nfunction App() {\n  const [items, setItems] = React.useState([])\n  const [active, setActive] = React.useState(0)\n  const [completed, setCompleted] = React.useState(0)\n  const [filter, setFilter] = React.useState('All')\n\n  React.useEffect(() => {\n    let c = 0\n    let a = 0\n    for (var i = 0; i < items.length; i++) {\n      if (items[i].completed) {\n        c += 1\n      } else {\n        a += 1\n      }\n    }\n\n    setCompleted(c)\n    setActive(a)\n  }, [items])\n\n  const findIndex = id => {\n    for (var i = 0; i < items.length; i++) {\n      if (id === items[i].id) return i\n    }\n\n    return null\n  }\n\n  const handleSubmit = (value) => {\n    setItems([...items, {id: uniqid(), value, completed: false}])\n    setActive(prev => prev + 1)\n  }\n\n  const toggleAll = () => {\n    let newItems\n    if (completed === items.length) {\n      newItems = items.map(item => ({...item, completed: false }))\n    } else {\n      newItems = items.map(item => ({...item, completed: true }))\n    }\n    setItems(newItems)\n  }\n\n  const toggle = id => {\n    let index = findIndex(id)\n    let newItems = [...items]\n    let newCompleted = !newItems[index].completed\n    newItems[index].completed = newCompleted\n    setItems(newItems)\n  }\n\n  const destroy = id => {\n    let index = findIndex(id)\n    let newItems = [...items]\n    newItems.splice(index, 1)\n    setItems(newItems)\n  }\n\n  const handleEdit = (value, id) => {\n    let index = findIndex(id)\n    let newItems = [...items]\n    newItems[index].value = value\n    setItems(newItems)\n  }\n\n  const handleClear = () => {\n    let newItems = items.filter(item => !item.completed)\n    setItems(newItems)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>todos</h1>\n      <div className=\"paper\">\n        <Input \n          handleSubmit={handleSubmit} \n          isToggle={0 !== items.length} \n          toggle={toggleAll} \n          toggleStyle={0 !== active ? {color: '#eee'} : {}} \n        />\n        {items.map(item => {\n          const display = 'All' === filter\n            ? true\n            : 'Active' === filter\n              ? false === item.completed\n              : true === item.completed\n\n          if (display) {\n            return (\n              <Item \n                key={item.id}\n                value={item.value} \n                completed={item.completed} \n                toggle={(e) => toggle(item.id)} \n                destroy={() => destroy(item.id)}\n                handleEdit={(value) => handleEdit(value, item.id)}\n              />\n            )\n          }\n        })}\n        {0 !== items.length && (\n          <Footer\n            active={active} \n            filter={filter}\n            handleFilter={(value) => setFilter(value)} \n            isClear={0 !== completed} \n            handleClear={handleClear}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}